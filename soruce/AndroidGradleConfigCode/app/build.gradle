apply plugin: 'com.android.application'
// Support Kotlin
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

int MILLIS_IN_MINUTE = 1000 * 60
int minutesSinceEpoch = System.currentTimeMillis() / MILLIS_IN_MINUTE

android {
    // release apk
    signingConfigs {
        google_release_key {
            keyAlias 'google_release_key'
            keyPassword '123456'
            storeFile file('/Users/hades/Documents/GitHub/GradleConfig/source/AndroidGradleConfigCode/key/google_release_key.jks')
            storePassword '123456'
        }
        release_key {
            keyAlias 'release_key'
            keyPassword '123456'
            storeFile file('/Users/hades/Documents/GitHub/Tools/source/AndroidGradleConfigCode/key/release_key.jks')
            storePassword '123456'
        }
    }
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.example.hades.android.gradleconfigcode"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        /**
         * FIX_ERROR: All flavors must now belong to a named flavor dimension. Learn more at https://d.android.com/r/tools/flavorDimensions-missing-error-message.html
         * 所有的flavors都必须属于同一个风格。
         * flavor dimension 它的维度就是该版本号
         */
        flavorDimensions "" + versionCode + ""
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

//        resConfigs "en"
    }

    // Configure your build for multiple APKs

    // Configure multiple APKs for screen densities
    splits {

        // Configures multiple APKs based on screen density.
        density {

            // Configures multiple APKs based on screen density.
            enable true

            // Specifies a list of screen densities Gradle should not create multiple APKs for.
            exclude "ldpi", "xxhdpi", "xxxhdpi"

            // Specifies a list of compatible screen size settings for the manifest.
            compatibleScreens 'small', 'normal', 'large', 'xlarge'
        }
    }

    // Configure multiple APKs for ABIs
//    splits {
//
//        // Configures multiple APKs based on ABI.
//        abi {
//
//            // Enables building multiple APKs per ABI.
//            enable true
//
//            // By default all ABIs are included, so use reset() and include to specify that we only
//            // want APKs for x86 and x86_64.
//
//            // Resets the list of ABIs that Gradle should create APKs for to none.
//            reset()
//
//            // Specifies a list of ABIs that Gradle should create APKs for.
//            include "x86", "x86_64"
//
//            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
//            universalApk false
//        }
//    }

    buildTypes {
        release {
            // Enable resources shrinking
            shrinkResources = true

            // 开启混淆 enable code shrinking with ProGuard
            minifyEnabled true
            // 混淆文件的位置
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-android-optimize.txt', 'proguard-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android.txt')
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFiles 'proguard-rules.pro'

            // Change the application ID for build variants => BuildConfig
            applicationIdSuffix ".release"
            versionNameSuffix "_release"
            // Disable PNG crunching
            crunchPngs = false
            signingConfig signingConfigs.release_key
        }
        // Change the application ID for build variants => BuildConfig
        debug {
            applicationIdSuffix ".debug"
//            Change the version name for build variants => BuildConfig
//            versionNameSuffix "_debug"
//            enable the Android plugin shrinker in debug build type

//            useProguard false
            // 开启混淆 enable code shrinking with ProGuard
            minifyEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-android-optimize.txt', 'proguard-rules.pro'
        }
    }
    /**
     * Combine multiple product flavors
     */
    /**
     productFlavors {baidu {// Change the application ID for build variants => BuildConfig
     applicationIdSuffix ".baidu"
     versionNameSuffix "_baidu"}google {// Change the application ID for build variants => BuildConfig
     applicationIdSuffix ".google"
     versionNameSuffix "_google"
     // release apk
     signingConfig signingConfigs.google_release_key}}**/
    /**
     * Enable Java8
     */
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    /**
     * Filter variants
     */
    variantFilter { variant ->
        def names = variant.flavors*.name
        // To check for a certain build type, use variant.buildType.name == "<buildType>"
        if (names.contains("baidu") && names.contains("release")) {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }
    }

    // Use static build config values with debug build
    applicationVariants.all { variant ->
        if (variant.buildType.name == "release" || variant.buildType.name.contains("release")) {
            variant.mergedFlavor.versionCode = minutesSinceEpoch;
            variant.mergedFlavor.versionName = minutesSinceEpoch + "-" + variant.flavorName;
        }
    }

    /**
     * Change default source set configurations
     */
    sourceSets {
        test {
            // default = src/test/java
            java.srcDirs += ['src/test2/java']
        }

        androidTest {
            // default = src/androidTest/java
            java.srcDirs += ['src/androidTest2/java']
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:26.1.0'
    //    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    // Define dependencies way2:
    implementation "com.android.support.constraint:constraint-layout:$rootProject.constraintlayoutVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    // Support Kotlin
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    /**
     FIX_ERROR:Conflict with dependency 'com.google.code.findbugs:jsr305' in project ':dragger'.
     Resolved versions for app (3.0.1) and test app (2.0.1) differ. See http://g.co/androidstudio/app-test-app-conflict for details.
     REF:
     http://www.itwendao.com/article/detail/476943.html
     */
    /**
     androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {exclude group: 'com.google.code.findbugs'，module: 'jsr305'
     exclude group: 'com.google.code.findbugs'，module: 'jsr305'})
     */
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    // Android Library
    //    implementation project(':calculator')
    //    implementation project(':calculator2')
    // File -> New -> New Module
    //  implementation project(':calculator2aar')
    // Use .jar by putting local maven repository
    //    implementation "com.example.hades:calculator2:1.0.0@aar"
    // Jar Library
    //    implementation project(':calculator3')
    //    implementation "com.example.hades:calculator3:1.0.0"
}
